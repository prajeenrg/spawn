name: "Go: Lint, Build, and Release"

on:
  push:
    tags:
      - "v*"
    branches:
      - "*"

env:
  BINDIR: "bin"
  SNAPSHOTDIR: "snapshots"
  LDFLAGS: "-w -s -X 'main.version=${{ github.ref_name }}'"

permissions:
  pull-requests: read
  contents: write

jobs:
  go-lint:
    name: "Lint Go Files"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v3

      - name: "Setup Go"
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"

      - name: "Golang CI Lint"
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.52.2
          only-new-issues: true
          args: --timeout 3m

  go-compile-check:
    name: "Run compilation check on  Go files"
    needs: go-lint
    if: ${{ github.ref_type == 'branch' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v3

      - name: "Setup Go"
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"

      - name: Build
        run: go build -v ./...

  go-build:
    name: "Build Go executables"
    needs: go-lint
    if: ${{ github.ref_type == 'tag' }}
    strategy:
      matrix:
        os: ["darwin", "linux", "windows"]
        arch: ["amd64", "arm64", "386"]
        exclude:
          - os: "darwin"
            arch: "386"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v3

      - name: "Setup Go"
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"

      - name: "Build ${{ matrix.os }} (${{ matrix.arch }}) executables"
        id: build-go-bin-exe
        run: |
          mkdir -p ${{ env.BINDIR }}
          go build -v --ldflags="${{ env.LDFLAGS }}" -o ${{ env.BINDIR }} ./...
          echo "ARTNAME=${{ env.ARTNAME }}" >> "$GITHUB_OUTPUT"
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          ARTNAME: ${{ format('spawn_{0}_{1}_{2}', github.ref_name, matrix.os, matrix.arch)}}

      - name: "Copy Windows executables to snapshots"
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          mkdir -p ${{ env.SNAPSHOTDIR }}
          cp ${{ env.BINDIR }}/spawn.exe ${{ env.SNAPSHOTDIR }}/${{ steps.build-go-bin-exe.ARTNAME }}.exe

      - name: "Compress binaries to tarballs"
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: |
          mkdir -p ${{ env.SNAPSHOTDIR }}
          tar acf ${{ env.SNAPSHOTDIR }}/${{ steps.build-go-bin-exe.ARTNAME }}.tar.gz -C $BINDIR .

      - name: "Upload ${{ matrix.os }} (${{ matrix.arch }}) executables"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build-go-bin-exe.ARTNAME }}
          path: ${{ env.SNAPSHOTDIR }}
          if-no-files-found: error

  release:
    name: "Release Artifacts"
    needs: go-build
    if: ${{ github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Download Artifacts"
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}

      - name: "Flatten Folders"
        run: |
          mv **/* .
          find -mindepth 1 -maxdepth 1 -type d -exec rmdir {} \;
          echo "ðŸ”½ Results from flattening"
          ls -al .
    
      - name: "Generate SHA256 checksum for assets"
        run: |
          find . -type f -exec sha256sum {} > checksums.txt \;
          echo "ðŸ”½ Generated checksums"
          cat sha256sums.txt

      - name: "Create release and upload assets"
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./*
          generate_release_notes: true
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}