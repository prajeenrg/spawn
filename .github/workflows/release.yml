name: "Go: Release Build"

on:
  push:
    tags:
      - "v*"

permissions:
  pull-requests: read
  contents: write

jobs:
  go-build:
    name: "Build Go executables"
    strategy:
      matrix:
        os: ["ubuntu", "macos"]
        arch: ["amd64"]
    runs-on: ${{ matrix.os }}-latest
    env:
      BINDIR: "bin"
      SNAPSHOTDIR: "snapshots"
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v3

      - name: "Setup Go"
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"

      - name: "Install Dependencies"
        run: |
          if [[ "${{ matrix.os }}" == "macos" ]]; then
            brew install webp
          else
            sudo apt-get install -y libwebp-dev
          fi

      - name: "Golang CI Lint"
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.52.2
          only-new-issues: true
          args: --timeout 3m

      - name: "🏗️ building ${{ matrix.os }} (${{ matrix.arch }}) executables"
        id: build-go-exe
        run: |
          mkdir -p ${{ env.BINDIR }}
          go build -v --ldflags="${{ env.LDFLAGS }}" -o ${{ env.BINDIR }} ./...
        env:
          CGO_LDFLAGS: "-lm"
          LDFLAGS: "-w -s -linkmode external -extldflags=-static -X 'main.version=${{ github.ref_name }}'"

      - name: "📦 archiving binaries to snapshots"
        id: archive
        run: |
          export ARTNAME="spawn_${{ github.ref_name }}_$(go env GOOS)_$(go env GOARCH)"
          mkdir -p ${{ env.SNAPSHOTDIR }}
          if ${{ startsWith(matrix.os, 'windows') }}; then
            echo "zipping up windows executables"
            cd ${{ env.BINDIR }}
            zip spawn.zip spawn.exe
            cd -
            cp ${{ env.BINDIR }}/spawn.zip ${{ env.SNAPSHOTDIR }}/$ARTNAME.zip
          else
            echo "tarball creation from binaries"
            tar acf ${{ env.SNAPSHOTDIR }}/$ARTNAME.tar.gz -C $BINDIR .
          fi
          echo "ARTNAME=$ARTNAME" >> "$GITHUB_OUTPUT"

      - name: "⬆️ uploading ${{ matrix.os }} (${{ matrix.arch }}) archives"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.archive.outputs.ARTNAME }}
          path: ${{ env.SNAPSHOTDIR }}
          if-no-files-found: error

  release:
    name: "Release Artifacts"
    needs: go-build
    if: ${{ github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Download Artifacts"
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}

      - name: "Flatten Folders"
        run: |
          mv **/* .
          find -mindepth 1 -maxdepth 1 -type d -exec rmdir {} \;
          echo "🔽 Results from flattening"
          ls -al .
    
      - name: "Generate SHA256 checksum for assets"
        run: |
          find . -type f -exec sha256sum {} > ${{ env.CHECKSUM_FILE }} \;
          echo "🔽 Generated checksums"
          cat ${{ env.CHECKSUM_FILE }}
        env:
          CHECKSUM_FILE: "checksums.txt"

      - name: "Create release and upload assets"
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./*
          generate_release_notes: true
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}